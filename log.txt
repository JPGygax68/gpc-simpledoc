2015-07-03 (2am)
================

- Have tried to implement undo() that handles both selections and "actions".

- MutationObserver seems to have serious problems when user enters spaces. Not sure why this happens or how to counter it. Also, I should probably check if this would also happen with earlier versions.

- There may be an alternative to implementing my own undo()/redo() stack: committing to executing all changes via the selection object. This could work because there is a method that can insert a node. Not sure however if that works for nodes that have children while maintaining undo capability.

2015-06-29
==========

New approach for handling selection with the undo stack: an second stack that records selections, with each record tracing the index into the action stack that was current at that moment. This makes it easy, after an action undo, to find the selection state to restore.

Redo is not implemented yet, but the real problem is that keyboard repetitions to not generate the "keyup" event upon which I was relying. I'll need to find another way.

-> Hm. Hooking both keyup *and* input seems to do the trick. More testing will be required... tomorrow.

2015-06-28
==========

I implemented an undo stack that so far works for character insertions and deletions. But it does not yet handle selection / caret. I tried a shortcut implementation based on comparing the old and new strings, but realized that cannot work in cases where characters are repeated.

I will need to take a more serious approach that utilizes actual selection information. I'm thinking about tacking selection information onto the current element of the undo stack. The input event might be worth a try as the trigger for this operation, as it apparently is fired only after user input that actually changes the data - which in this case is exactly what is needed.

I had a look at the bookmarking feature of rangy, however that doesn't seem to fit the bill, as positions appear to be character counts relative to the body tag. To obtain offsets relative to the containing node/element, one needs to examine the startNode/startOffset and endNode/endOffset properties of the Range objects.

More thought will be needed to make this work in complex cases (multiple selections, selections spanning more than one node/element), but it should serve as a start.

2015-06-27
==========

I learned more about undo/redo today; I also had a quick look at scribe, a wysiwyg component developed at (?) and used by the newspaper The Guardian.

scribe uses interesting and advanced Javascript techniques and libraries; most importantly though, it incorporates quite a bit of specialized know-how about handling browser quirks. It makes me wonder whether it really is a good idea to try and lift this thing by myself. On the other hand, I remain unconvinced that scribe would be a good foundation for my own work, mainly because it's documentation is rather lacking, but also because my own goal is somewhat different from that of scribe's authors, which was to make an editor that creates semantic HTML.

About undo and redo, here's what I have learned:
- built-in undo/redo works reasonably well, but the chain breaks when the DOM is manipulated by code (except via Document.execCommand)
- the MutationObserver object makes it possible to manually record and undo/redo manipulations

So, one possible way to go forward would be to simply use execCommand(), which however would not cover things like assigning classes or special attributes.

The polar opposite approach would be to use a MutationObserver to record and undo/redo changes entirely by code. That approach should afford virtually unlimited possibilities [note: such as "adorning" recorded changes with extra information, in addition to having any number of specialized undo/redo record], but would involve quite a bit of added complexity. One problem is that selection character-level changes must be done at the string level, meaning that the caret position / selection range gets lost when that kind of undo is done manually, so that selection must be saved and restored manually as well.

Nevertheless, I feel that the latter way is the more promising one for the intended goal, which is to create a customizable "semantic" document editor. Also, a code-controlled undo stack has a better chance of being integrated with revision control mechanisms later on.

2015-06-27
==========

The following article is a total must-read:

http://addyosmani.com/blog/mutation-observers/


2015-06-25
==========

(Note: the keyboard polyfill didn't work out. Apparently, it doesn't play well with the latest versions of Chrome, where some constants that it tries to define already exist, read-only.)

Things are getting a bit more complex now with the implementation of the first special, element type specific "action" (Ctrl-H = convert paragraph to header).

The questions this raises touch upon how to keep editor state sane when interacting with plugged in functionality.

The ultimate in KISS, I suppose, would be not to give plugins any access to the DOM at all and force them to operate on the document only. This idea has appeal, but it would force the editor to keep a "shadow copy" of the document up-to-date for the plugins to work on (though that may be a good idea anyway). It might also seriously limit the things that plugins can do. In the end, I think it makes a lot more sense for plugins to get access to both document elements and element proxies.

The trick will be to establish workable rules for the interaction between core and plugins. One of the bigger questions might be how to handle selection.


2015-06-24
==========

Lesson learned: an element that is marked content-editable will *capture* all keyboard input of contained elements, even if they are content-editable themselves. (At least on Chrome.)

------

Another lesson: the W3C (or Mozilla?) is working on cool keyboard-related functionality, but it's not here yet. jQuery only normalizes the "which" property, which is already marked as deprecated in the MDN (although there is no clear alternative to it on some current browsers). 
In particular, the "key" property, which gives a spelled-out name to every key, is only implemented in the current Firefox. Unfortunately, jQuery does not attempt to provide that functionality.

A polyfill exists: 
  https://github.com/inexorabletash/polyfill/blob/master/keyboard.md 
  
I think this represents the best way to go forward at this time. Here's hoping jQuery won't mess it up.
What's a bit sad is that this polyfill probably wouldn't play too well with CommonJS.

Or maybe it would be saner to just use the "which" property, which after all is normalized by jQuery and broadly available even without jQuery (though it *is* marked as deprecated in the MDN). Creating a map from "which" to key names could be done piece-meal.


2015-06-22
==========

The editor needs to keep track of where the selection (the caret) is within the document structure. This is required for probably more than one thing; right now, directing commands to the right handler (plugin) is what's on my mind.

-----------

New term: "proxy". Means the DOM element representing a document element.

Got an embryo for event handlers. Next task: detect and handle new paragraphs created by editing. (Right now, new paragraph proxies are being assigned neither a document element, nor a doc element type - the latter is needed however for the newly-introduced event handling).

2015-06-21
==========

Got "artificial" highlighting working as an experimental feature.

- Multiple block ? (highlighted in different colors ?)
- What about multiple level (e.g. chapter - paragraph) ?

2015-06-20
==========

Handling inline elements is a problem that needs to be solved. I'm starting to experiment with that now.


2015-06-16
==========

Thoughts on how to proceed.

A "document" can be and contain many and very different things. Because of that, any "Editor" needs to be carefully architectured so as to be extremely simple at its core, obtaining nearly all of its functionality via "plug-ins" or "pluggable components".

The basic idea is relatively simple: every node in the document tree is represented by a DOM element (or a branch of DOM elements, if a single element is not sufficient). The Editor components draws upon a registry that provides functional elements for every known node type.

"Juggling" these functional elements is the main task of the Editor component. The editor does not necessarily need to have the complete set of functional elements for every node type in order to be able to work on a document - some may be optional.

Functional elements could be:

- Converting the node (JS object) to a DOM representation
- Converting the DOM representation back to a document node
- Input filter to provide editing functionality

With such a plug-in based architecture, the complex task of editing documents could actually become not only doable, but fun. Discipline will be required to avoid going into too many directions at once.

Plug-ins could provide any number of functional elements, and might even compete among each other. 
... but also work with each other, by looking each other up to collaborate (might be a can of worms though).

Not sure about the following idea yet: hierarchical document node types ? With carefully crafted rules, functional elements could delegate work to other plug-ins without even knowing them, simply by telling the Editor that they are *not* consuming the event they received.

2015-06-09
==========

Updating the index via a roundtrip to the CouchDB server is slow. I'm not sure that's really relevant though: since the update happens asynchronously, the only problem is the user wondering why his change does not seem to affect the index - until it does.

Using PouchDB as a local cache might help. Of course, that will raise many questions about synchronization.

Without lightning-fast caching though, it would fall to the user interface to adequately communicate delays to the user. Also, care must be taken that a refresh can be aborted, and that it does not in any way make any part of the UI unusable, or tricks the user into making wrong clicks by changing the position of things while the user is interacting with them [to my knowledge, few UIs actually deal with this hazard, but it should be done regardless].


2015-06-08
==========

I have now re-engineered the "thing" and decided that what I'm displaying on the page is not a document, but an editor.

So now that I'm looking at this as a custom widget of sorts, things are starting to fall in place, especially regarding loading and saving documents (of which only the former works at this point: I can now do that via explicit code rather than try to have Knockout control the process.

A thought: maybe I should put SimpleDoc CSS code into a separate file  perhaps even (eventually) make it a separate package - from the CSS meant for the editor.

Another thought: this should probably become a Knockout "component" pretty soon.


2015-06-06
==========

- OMG. WebODF!!

2015-06-03
==========

- RESTful cookbook: http://restcookbook.com/HTTP%20Methods/put-vs-post/

--------

Today's accomplishment: saving documents, and getting an index; both via hand-coded routes, and with Cradle as a "middle man" and/or "facilitator".

I think there should be an NPM module for the repetitive part of a RESTful api. Not that it is long or difficult work, but in many cases, the only thing that changes is the class name of the objects contained in the collection, plus the plural form so that the collection can be properly named.

I think supporting Backbone and/or Knockback should be doable with minimal code on both the server and the client side.

2015-05-31
==========

- CAUTION: .gitignore contains dist/*, meaning that NPM will ignore it too by default ?

- TODO next: css-injector

2015-05-30
==========

It appears that I will have to intercept the RETURN key: Firefox does not create a new element (contrary to Chrome), but merely inserts a br element. Fixing this after it has happened would introduce a "twitchiness" that no one wants to see.

-----

Apparently, counting "input" events and "ctrl-z" occurrences is the only way to detect whether an undo should be left to the browser or handled by my code (and even that may well be unreliable (will the browser consider the "undo" as done or not when I cancel the ctrl-z keydown event?). I fear I will still have a way to work with this.

-----

Strange - after having almost completed paragraph splitting, it appears that it is not necessary after all. The problems earlier, including the browser differences, were apparently due to the fact that the initial document did not have a paragraph element.

This means that care must be taken to ensure that P elements are used where ever appropriate. In fact, this is related to all sorts of questions of how - or how not - to structure documents.

2015-05-29
==========

I did some experimenting with Knockout and contenteditable.

My assessment for the moment is that Knockout may be ill-suited to be the workhorse for a document editor (though it could still, and probably should, be made into a Knockout component at some point).

The reason is that contenteditable can do impressive things on its own. For example, appending a new paragraph to an existing one is something that requires no programming at all. But if one wanted to maintain a 1:1 relationship between Knockout view-models and P elements in the DOM, one would need to both intercept all the events leading to the creation of the new paragraph, which could be very difficult to do and still be very unreliable, and the do the exact same thing programmatically.

This means that it would probably be a better idea to let contenteditable do its thing without too much interference, with the code just sprinkling in its support to guide things and enforce a few rules in the interest of well-formedness.

This means that updating the model is something that has to be done programmatically as well. I'm not 100% sure at this point whether this should be an actual data model or a view-model, i.e. an intermediary. Since Knockout is ill-suited for free-style document editing, it would not be a Knockout view-model anyway. So I think I will define an actual data model, with JS objects in minds (but potentially adaptable/upgradeable to XML).

Updating said data model should happen in response to input events. For example, when the user presses the RETURN key, the browser will insert/append a new paragraph at the cursor position, meaning that it will be safe to store the paragraph it was previously in.

That should indeed be the modus operandi: let the browser do its thing (mostly), then update the data model from the DOM. In some cases, it may be necessary to delay the programmed reaction (via a 1ms timeout?); specifically, when the idea is to modify the DOM structure created/modified by the browser. Though it is my hope that things can be monitored with sufficient precision to make it possible to simply abort events, rather than trying to fix things after they're done.

Next step: create a Knockout custom binding called "GPC SimpleDocument", then implement that using jQuery. The first goal would be the ability to append/insert and delete paragraphs, and update a super-simple data model defined thus:

  - Document: [ Node ]
  - Node <- Paragraph
  - Node <- [ Node ]

Other node types will be added later.

Another idea would be to use the DOM itself as the "official" data model, and leave storing it to consumers. That does present a potential problem though in that the DOM will likely have to be annotated by the document editor for its own benefit, meaning that filtering would be necessary.

Yet another idea would be to use XSLT to load and store documents, implying the use of XML instead of JSON. In all likelihood though, JS code would be the easiest choice.